########################################################################
#
# Usage: python import_dawba.py path
# where path is a file or a directory containing dawba csv file(s) from
# London, Nottingham, Dublin, Berlin, Mannheim, Hamburg, Paris, Dresden
# display all (psc, question, answer) tuple contained in these file(s)
# and insert data in 4 questionnaires according the repartition list
# (Parent1, Youth, Computer, ClinicalRate)
#
########################################################################

import os
import sys
#import time
#import datetime
import traceback
from glob import glob
from csv import reader
from cubicweb import dbapi

c = dbapi.connect('zmqpickle-tcp://127.0.0.1:8181', login='admin', password='admin')

#Local cache variables
subjects = dict(c.cursor().execute('Any I, S WHERE S is Subject, S identifier I'))
QUESTIONS = dict(c.cursor().execute('Any I, X WHERE X is Question, X identifier I'))
QUESTION_POSSIBLE_ANSWERS = dict(c.cursor().execute('Any X, A WHERE X is Question, X possible_answers A'))

#This following list is copied from dawba_list.py file
dawba_dic = {
 'Parent1':
     ['p1a1a',
     'p1a1b',
     'p1a1c',
     'p1a1d',
     'p1a1e',
     'p1a1f',
     'p1a1g',
     'p1a1h',
     'p1a1i',
     'p1a1k',
     'p1a1l',
     'p1a2',
     'p1a3a',
     'p1a3b',
     'p1a3c',
     'p1a3d',
     'p1a3e',
     'p1a3f',
     'p1a3g',
     'p1a3h',
     'p1a3i',
     'p1a3j',
     'p1a3k',
     'p1a4',
     'p1a5',
     'p1a6',
     'p1a7a',
     'p1a7b',
     'p1a7c',
     'p1a7d',
     'p1a8',
     'p1adhdbandd',
     'p1adhdbandi',
     'p1afraid',
     'p1agoband',
     'p1asdband',
     'p1attends',
     'p1b10',
     'p1b11',
     'p1b1a',
     'p1b1b',
     'p1b1c',
     'p1b1d',
     'p1b1e',
     'p1b1f',
     'p1b1g',
     'p1b1h',
     'p1b1i',
     'p1b1j',
     'p1b1k',
     'p1b1l',
     'p1b1m',
     'p1b2',
     'p1b3',
     'p1b4',
     'p1b5',
     'p1b6',
     'p1b7',
     'p1b8',
     'p1b9',
     'p1bmi',
     'p1bullied',
     'p1burden',
     'p1c1',
     'p1c10',
     'p1c11',
     'p1c12',
     'p1c13',
     'p1c14',
     'p1c15',
     'p1c16',
     'p1c2a',
     'p1c2b',
     'p1c2c',
     'p1c2d',
     'p1c2e',
     'p1c2f',
     'p1c3',
     'p1c4',
     'p1c5',
     'p1c6',
     'p1c7',
     'p1c8',
     'p1c9',
     'p1caring',
     'p1cdband',
     'p1chronic',
     'p1clingy',
     'p1conduct',
     'p1consid',
     'p1d1',
     'p1d2a',
     'p1d2b',
     'p1d2c',
     'p1d2d',
     'p1d3',
     'p1depband',
     'p1distrac',
     'p1distres',
     'p1e1',
     'p1e2a',
     'p1e2b',
     'p1e2c',
     'p1e2d',
     'p1e2e',
     'p1e2f',
     'p1e2g',
     'p1e2h',
     'p1e2i',
     'p1e2j',
     'p1e2k',
     'p1e3',
     'p1e3a',
     'p1e4a',
     'p1e4b',
     'p1e4c',
     'p1e4d',
     'p1e4e',
     'p1e4f',
     'p1e4g',
     'p1e4h',
     'p1e4i',
     'p1e4j',
     'p1e4k',
     'p1e4l',
     'p1e4m',
     'p1e4n',
     'p1e4o',
     'p1e5',
     'p1e6',
     'p1e7',
     'p1e8a',
     'p1e8b',
     'p1e8c',
     'p1e8d',
     'p1e9',
     'p1eatband',
     'p1ebddiff',
     'p1ebdtot',
     'p1efq1',
     'p1efq10',
     'p1efq2',
     'p1efq3',
     'p1efq4',
     'p1efq5',
     'p1efq6',
     'p1efq7',
     'p1efq8',
     'p1efq9',
     'p1efqp1',
     'p1efqp10',
     'p1efqp2',
     'p1efqp3',
     'p1efqp4',
     'p1efqp5',
     'p1efqp6',
     'p1efqp7',
     'p1efqp8',
     'p1efqp9',
     'p1efqptot',
     'p1efqtot',
     'p1emotion',
     'p1employedfa',
     'p1employedmo',
     'p1f1',
     'p1f10',
     'p1f11',
     'p1f12a',
     'p1f12b',
     'p1f12c',
     'p1f12d',
     'p1f13',
     'p1f2a',
     'p1f2b',
     'p1f2c',
     'p1f2d',
     'p1f2e',
     'p1f2f',
     'p1f2g',
     'p1f3',
     'p1f4',
     'p1f6',
     'p1f7',
     'p1f8',
     'p1f9',
     'p1fidgety',
     'p1fights',
     'p1flq1',
     'p1flq10',
     'p1flq13',
     'p1flq15',
     'p1flq16',
     'p1flq17',
     'p1flq18',
     'p1flq19',
     'p1flq21',
     'p1flq3',
     'p1flq4',
     'p1flq6',
     'p1flq7',
     'p1flq8',
     'p1flqaff',
     'p1flqdis',
     'p1flqrul',
     'p1flqspe',
     'p1fr1',
     'p1fr2',
     'p1fr3',
     'p1fr4',
     'p1fr5',
     'p1fr6',
     'p1friend',
     'p1fs1',
     'p1fs10',
     'p1fs11',
     'p1fs12',
     'p1fs13',
     'p1fs14',
     'p1fs15',
     'p1fs16',
     'p1fs2',
     'p1fs3',
     'p1fs4',
     'p1fs5',
     'p1fs6',
     'p1fsill',
     'p1fsrel',
     'p1fsses',
     'p1fstot',
     'p1fswtp',
     'p1g10a',
     'p1g10b',
     'p1g10c',
     'p1g10d',
     'p1g11',
     'p1g2',
     'p1g2a',
     'p1g3',
     'p1g4a',
     'p1g4b',
     'p1g4c',
     'p1g4d',
     'p1g4e',
     'p1g4f',
     'p1g4g',
     'p1g4h',
     'p1g4i',
     'p1g4j',
     'p1g4k',
     'p1g6',
     'p1g7',
     'p1g8a',
     'p1g8b',
     'p1g8c',
     'p1g8d',
     'p1g8e',
     'p1g8f',
     'p1g9',
     'p1genaband',
     'p1h1',
     'p1h10',
     'p1h11',
     'p1h13',
     'p1h14',
     'p1h15',
     'p1h16',
     'p1h17',
     'p1h18a',
     'p1h18b',
     'p1h18c',
     'p1h18d',
     'p1h18e',
     'p1h18f',
     'p1h18g',
     'p1h18h',
     'p1h18i',
     'p1h18j',
     'p1h18k',
     'p1h18l',
     'p1h19',
     'p1h2',
     'p1h20a',
     'p1h20b',
     'p1h20c',
     'p1h20d',
     'p1h21',
     'p1h3',
     'p1h4',
     'p1h5',
     'p1h7',
     'p1h8',
     'p1h9',
     'p1helpbook',
     'p1helpcamh',
     'p1helpep',
     'p1helpfamily',
     'p1helpgp',
     'p1helpgroup',
     'p1helpmeds',
     'p1helpnet',
     'p1helpother',
     'p1helpout',
     'p1helppaed',
     'p1helpphone',
     'p1helpsen',
     'p1helpsoc',
     'p1helpteacher',
     'p1hyper',
     'p1impact',
     'p1impclas',
     'p1impfrie',
     'p1imphome',
     'p1impleis',
     'p1j1',
     'p1j10',
     'p1j2a',
     'p1j2b',
     'p1j2c',
     'p1j2d',
     'p1j2e',
     'p1j3a',
     'p1j3b',
     'p1j3c',
     'p1j3d',
     'p1j4a',
     'p1j4b',
     'p1j4c',
     'p1j4d',
     'p1j4e',
     'p1j4f',
     'p1j4g',
     'p1j4h',
     'p1j4i',
     'p1j5a',
     'p1j5b',
     'p1j5c',
     'p1j6',
     'p1j7',
     'p1j8',
     'p1j9a',
     'p1j9b',
     'p1j9c',
     'p1j9d',
     'p1k1',
     'p1k10a',
     'p1k10b',
     'p1k10c',
     'p1k10d',
     'p1k10e',
     'p1k10f',
     'p1k10g',
     'p1k10h',
     'p1k11',
     'p1k11a',
     'p1k11aa',
     'p1k12a',
     'p1k12b',
     'p1k12c',
     'p1k12d',
     'p1k13',
     'p1k2a',
     'p1k2b',
     'p1k2c',
     'p1k2d',
     'p1k2e',
     'p1k2f',
     'p1k2g',
     'p1k2h',
     'p1k2i',
     'p1k3',
     'p1k4',
     'p1k5',
     'p1k6a',
     'p1k6b',
     'p1k6c',
     'p1k6d',
     'p1k7',
     'p1k8a',
     'p1k8b',
     'p1k8c',
     'p1k8d',
     'p1k8e',
     'p1k8f',
     'p1k8g',
     'p1k9',
     'p1kind',
     'p1l1a',
     'p1l1b',
     'p1l1c',
     'p1l2',
     'p1l3',
     'p1l4',
     'p1l5',
     'p1l6',
     'p1lies',
     'p1loner',
     'p1n1a',
     'p1n1b',
     'p1n1c',
     'p1n1d',
     'p1n1e',
     'p1n1f',
     'p1n1g',
     'p1n1h',
     'p1n1i',
     'p1n1j',
     'p1n1k',
     'p1n1l',
     'p1n2a',
     'p1n2b',
     'p1n2c',
     'p1n2d',
     'p1n2e',
     'p1n2f',
     'p1n2g',
     'p1n2h',
     'p1n2i',
     'p1n2j',
     'p1n2k',
     'p1n2l',
     'p1obeys',
     'p1ocdband',
     'p1oddband',
     'p1oldbest',
     'p1p10',
     'p1p11',
     'p1p12',
     'p1p13',
     'p1p14',
     'p1p15',
     'p1p16',
     'p1p17',
     'p1p18a',
     'p1p18b',
     'p1p18c',
     'p1p18d',
     'p1p18e',
     'p1p18f',
     'p1p18g',
     'p1p18h',
     'p1p19',
     'p1p1a',
     'p1p1b',
     'p1p1c',
     'p1p1d',
     'p1p1e',
     'p1p20',
     'p1p21',
     'p1p22',
     'p1p26',
     'p1p27a',
     'p1p27b',
     'p1p27c',
     'p1p27d',
     'p1p28',
     'p1p2a',
     'p1p2aexact',
     'p1p2b',
     'p1p2bexact',
     'p1p2c',
     'p1p2cexact',
     'p1p2d',
     'p1p2dexact',
     'p1p3',
     'p1p4',
     'p1p5',
     'p1p6',
     'p1p7',
     'p1p8',
     'p1p9',
     'p1panband',
     'p1parsit1',
     'p1parsit2a',
     'p1parsit2b',
     'p1parsit2c',
     'p1parsit2d',
     'p1parsit2e',
     'p1parsit2f',
     'p1parsit2g',
     'p1parsit2h',
     'p1parsit2i',
     'p1parsit2j',
     'p1parsit2k',
     'p1parsit3a',
     'p1parsit3b',
     'p1parsit3c',
     'p1parsit3d',
     'p1parsit3e',
     'p1parsit3f',
     'p1parsit3g',
     'p1parsit3h',
     'p1parsit3i',
     'p1parsit3j',
     'p1parsit3k',
     'p1peer',
     'p1popular',
     'p1prosoc',
     'p1ptsdband',
     'p1q1',
     'p1q13',
     'p1q14',
     'p1q15',
     'p1q16',
     'p1q17',
     'p1q18',
     'p1q19',
     'p1q2',
     'p1q20',
     'p1q21',
     'p1q22a',
     'p1q22b',
     'p1q22c',
     'p1q22d',
     'p1q23',
     'p1q3a',
     'p1q3b',
     'p1q3c',
     'p1q3d',
     'p1q3e',
     'p1q3f',
     'p1q3g',
     'p1q3h',
     'p1q3i',
     'p1q3j',
     'p1q3k',
     'p1q3l',
     'p1q3m',
     'p1q3n',
     'p1q3o',
     'p1q4',
     'p1q6a',
     'p1q6b',
     'p1q6c',
     'p1q6d',
     'p1q6e',
     'p1q6f',
     'p1q6g',
     'p1q6h',
     'p1q6i',
     'p1q6j',
     'p1q6k',
     'p1q7',
     'p1r1',
     'p1r10',
     'p1r11',
     'p1r12',
     'p1r13',
     'p1r14',
     'p1r15',
     'p1r16',
     'p1r17',
     'p1r18',
     'p1r19',
     'p1r2',
     'p1r20',
     'p1r21',
     'p1r22',
     'p1r24',
     'p1r25',
     'p1r26',
     'p1r27',
     'p1r28',
     'p1r29',
     'p1r3',
     'p1r30',
     'p1r31',
     'p1r32',
     'p1r33',
     'p1r34',
     'p1r36',
     'p1r37',
     'p1r38',
     'p1r39',
     'p1r4',
     'p1r40a',
     'p1r40b',
     'p1r40c',
     'p1r40d',
     'p1r41',
     'p1r42',
     'p1r43',
     'p1r5',
     'p1r6a',
     'p1r6b',
     'p1r6c',
     'p1r6d',
     'p1r6e',
     'p1r7',
     'p1r8',
     'p1r9',
     'p1recentle1',
     'p1recentle2',
     'p1recentle3',
     'p1recentle4',
     'p1recentle5',
     'p1recentle6',
     'p1recentle7',
     'p1reflect',
     'p1restles',
     'p1s1',
     'p1s10',
     'p1s11a',
     'p1s11b',
     'p1s11c',
     'p1s11d',
     'p1s12',
     'p1s2a',
     'p1s2b',
     'p1s2c',
     'p1s2d',
     'p1s3',
     'p1s4',
     'p1s5a',
     'p1s5b',
     'p1s5c',
     'p1s5d',
     'p1s5e',
     'p1s5f',
     'p1s5g',
     'p1s5h',
     'p1s5i',
     'p1s5j',
     'p1s5k',
     'p1s5l',
     'p1s5m',
     'p1s5n',
     'p1s5o',
     'p1s5p',
     'p1s5q',
     'p1s5r',
     'p1s5s',
     'p1s5t',
     'p1s5u',
     'p1s5v',
     'p1s5w',
     'p1s5x',
     'p1s5y',
     'p1s5z',
     'p1s6a',
     'p1s6b',
     'p1s6c',
     'p1s6d',
     'p1s7',
     'p1s8',
     'p1s9',
     'p1sas1',
     'p1sas10',
     'p1sas2',
     'p1sas3',
     'p1sas4',
     'p1sas5',
     'p1sas6',
     'p1sas7',
     'p1sas8',
     'p1sas9',
     'p1sastot',
     'p1schoolno',
     'p1schooltype',
     'p1sepabandd',
     'p1sepabandi',
     'p1shares',
     'p1sibsit1boy',
     'p1sibsit1girl',
     'p1sibsit2boy',
     'p1sibsit2girl',
     'p1somatic',
     'p1sophband',
     'p1spphband',
     'p1startdate',
     'p1steals',
     'p1tantrum',
     'p1ticbandd',
     'p1ticbandi',
     'p1type',
     'p1unhappy',
     'p1well',
     'p1worries'],
 'Youth':
     ['sa1a',
     'sa1b',
     'sa1c',
     'sa1d',
     'sa1e',
     'sa1f',
     'sa1g',
     'sa1h',
     'sa1i',
     'sa1k',
     'sa1l',
     'sa2',
     'sa3a',
     'sa3b',
     'sa3c',
     'sa3d',
     'sa3e',
     'sa3f',
     'sa3g',
     'sa3h',
     'sa3i',
     'sa3j',
     'sa3k',
     'sa4',
     'sa5',
     'sa6',
     'sa7a',
     'sa7b',
     'sa7c',
     'sa7d',
     'sa8',
     'safraid',
     'sagoband',
     'sattends',
     'sb10',
     'sb11',
     'sb1a',
     'sb1b',
     'sb1c',
     'sb1d',
     'sb1e',
     'sb1f',
     'sb1g',
     'sb1h',
     'sb1i',
     'sb1j',
     'sb1k',
     'sb1l',
     'sb1m',
     'sb2',
     'sb3',
     'sb4',
     'sb5',
     'sb6',
     'sb7',
     'sb8',
     'sb9',
     'sbmi',
     'sbullied',
     'sburden',
     'sc1',
     'sc10a',
     'sc10b',
     'sc10c',
     'sc11',
     'sc12',
     'sc13',
     'sc14',
     'sc15',
     'sc16',
     'sc17',
     'sc2a',
     'sc2b',
     'sc2c',
     'sc2d',
     'sc2e',
     'sc2f',
     'sc3',
     'sc4',
     'sc5',
     'sc6',
     'sc7',
     'sc8',
     'sc9',
     'scaring',
     'scdband',
     'schronic',
     'sclingy',
     'sconduct',
     'sconsid',
     'sd1',
     'sd2a',
     'sd2b',
     'sd2c',
     'sd3a',
     'sd3b',
     'sd3c',
     'sd3d',
     'sd3e',
     'sd3f',
     'sd3g',
     'sd3h',
     'sd3i',
     'sd3j',
     'sd3k',
     'sd3l',
     'sd3m',
     'sd3n',
     'sd4a',
     'sd4b',
     'sd4c',
     'sd4d',
     'sd5',
     'sd6',
     'sd7a',
     'sd7b',
     'sd7c',
     'sd7d',
     'sd8',
     'sdepband',
     'sdistrac',
     'sdistres',
     'se1',
     'se2a',
     'se2b',
     'se2c',
     'se2d',
     'se2e',
     'se2f',
     'se2g',
     'se2h',
     'se2i',
     'se2j',
     'se2k',
     'se3',
     'se3a',
     'se4a',
     'se4b',
     'se4c',
     'se4d',
     'se4e',
     'se4f',
     'se4g',
     'se4h',
     'se4i',
     'se4j',
     'se4k',
     'se4l',
     'se4m',
     'se4n',
     'se4o',
     'se5',
     'se6',
     'se7',
     'se8a',
     'se8b',
     'se8c',
     'se8d',
     'se9',
     'seatband',
     'sebddiff',
     'sebdtot',
     'semotion',
     'sf1',
     'sf10',
     'sf11',
     'sf12a',
     'sf12b',
     'sf12c',
     'sf12d',
     'sf13',
     'sf2a',
     'sf2b',
     'sf2c',
     'sf2d',
     'sf2e',
     'sf2f',
     'sf2g',
     'sf3',
     'sf4',
     'sf6',
     'sf7',
     'sf8',
     'sf9',
     'sfidgety',
     'sfights',
     'sfriend',
     'sg10a',
     'sg10b',
     'sg10c',
     'sg10d',
     'sg11',
     'sg2',
     'sg2a',
     'sg3',
     'sg4a',
     'sg4b',
     'sg4c',
     'sg4d',
     'sg4e',
     'sg4f',
     'sg4g',
     'sg4h',
     'sg4i',
     'sg4j',
     'sg4k',
     'sg6',
     'sg7',
     'sg8a',
     'sg8b',
     'sg8c',
     'sg8d',
     'sg8e',
     'sg8f',
     'sg9',
     'sgenaband',
     'sh1',
     'sh10',
     'sh11',
     'sh13',
     'sh14',
     'sh15',
     'sh16',
     'sh17',
     'sh18a',
     'sh18b',
     'sh18c',
     'sh18d',
     'sh18e',
     'sh18f',
     'sh18g',
     'sh18h',
     'sh18i',
     'sh18j',
     'sh18k',
     'sh18l',
     'sh19',
     'sh2',
     'sh20a',
     'sh20b',
     'sh20c',
     'sh20d',
     'sh21',
     'sh3',
     'sh4',
     'sh5',
     'sh7',
     'sh8',
     'sh9',
     'shelpout',
     'shyper',
     'simpact',
     'simpclas',
     'simpfrie',
     'simphome',
     'simpleis',
     'sj1a',
     'sj1b',
     'sj1c',
     'sk1',
     'sk2',
     'sk3',
     'sk4a',
     'sk4b',
     'sk4c',
     'sk4d',
     'sk4e',
     'sk4f',
     'sk4g',
     'sk5',
     'sk6a',
     'sk6b',
     'sk6c',
     'sk6d',
     'sk6e',
     'sk6f',
     'sk6g',
     'sk6h',
     'sk7',
     'sk7a',
     'sk8a',
     'sk8b',
     'sk8c',
     'sk8d',
     'sk9',
     'skind',
     'sl1',
     'sl2',
     'sl3',
     'sl4',
     'slies',
     'sloner',
     'sn1a',
     'sn1b',
     'sn1c',
     'sn1d',
     'sn1e',
     'sn1f',
     'sn1g',
     'sn1h',
     'sn2a',
     'sn2b',
     'sn2c',
     'sn2d',
     'sn2e',
     'sn2f',
     'sn2g',
     'sn2h',
     'sn2i',
     'sn2j',
     'sn2k',
     'sobeys',
     'socdband',
     'soldbest',
     'sp10',
     'sp11',
     'sp12',
     'sp13',
     'sp14',
     'sp15',
     'sp16',
     'sp17',
     'sp18a',
     'sp18b',
     'sp18c',
     'sp18d',
     'sp18e',
     'sp18f',
     'sp18g',
     'sp18h',
     'sp19',
     'sp1a',
     'sp1b',
     'sp1c',
     'sp1d',
     'sp1e',
     'sp20',
     'sp21',
     'sp22',
     'sp26',
     'sp27a',
     'sp27b',
     'sp27c',
     'sp27d',
     'sp28',
     'sp2a',
     'sp2aexact',
     'sp2b',
     'sp2bexact',
     'sp2c',
     'sp2cexact',
     'sp2d',
     'sp2dexact',
     'sp3',
     'sp4',
     'sp5',
     'sp6',
     'sp7',
     'sp8',
     'sp9',
     'spanband',
     'speer',
     'spopular',
     'sprosoc',
     'sptsdband',
     'sreflect',
     'srestles',
     'ss1',
     'ss10',
     'ss11a',
     'ss11b',
     'ss11c',
     'ss11d',
     'ss12',
     'ss2a',
     'ss2b',
     'ss2c',
     'ss2d',
     'ss3',
     'ss4',
     'ss5a',
     'ss5b',
     'ss5c',
     'ss5d',
     'ss5e',
     'ss5f',
     'ss5g',
     'ss5h',
     'ss5i',
     'ss5j',
     'ss5k',
     'ss5l',
     'ss5m',
     'ss5n',
     'ss5o',
     'ss5p',
     'ss5q',
     'ss5r',
     'ss5s',
     'ss5t',
     'ss5u',
     'ss5v',
     'ss5w',
     'ss5x',
     'ss5y',
     'ss5z',
     'ss6a',
     'ss6b',
     'ss6c',
     'ss6d',
     'ss7',
     'ss8',
     'ss9',
     'ssepabandd',
     'ssepabandi',
     'sshares',
     'ssomatic',
     'ssophband',
     'sspphband',
     'sstartdate',
     'ssteals',
     'st1',
     'st10',
     'st11a',
     'st11b',
     'st11c',
     'st11d',
     'st11e',
     'st11f',
     'st11g',
     'st12',
     'st13',
     'st14',
     'st15',
     'st16a',
     'st16b',
     'st16c',
     'st16d',
     'st17',
     'st2',
     'st3',
     'st4',
     'st5',
     'st6',
     'st7',
     'st8',
     'st9',
     'stantrum',
     'sunhappy',
     'sworries'],
 'Computer':
     ['adhdbandd',
     'adhdbandi',
     'adhdtype',
     'agoband',
     'asdband',
     'asdtyped',
     'asdtypei',
     'cdband',
     'depband',
     'deptypei',
     'eatband',
     'eattyped',
     'eattypei',
     'genaband',
     'levelband',
     'ocdband',
     'oddband',
     'panband',
     'ptsdband',
     'sdqcase',
     'sdqcd',
     'sdqed',
     'sdqhk',
     'sepabandd',
     'sepabandi',
     'sophband',
     'spphband',
     'ticbandd',
     'ticbandi',
     'tictyped',
     'tictypei'],
 'ClinicalRate':
     ['cgas',
     'dcadhdc',
     'dcadhdh',
     'dcadhdi',
     'dcadhdo',
     'dcagor',
     'dcany',
     'dcanycd',
     'dcanyhk',
     'dcanyso',
     'dccd',
     'dcdisat',
     'dceat',
     'dcemot',
     'dcgena',
     'dcinhat',
     'dcmadep',
     'dcmania',
     'dcmutis',
     'dcocd',
     'dcodd',
     'dcotanx',
     'dcotdep',
     'dcothat',
     'dcothcd',
     'dcother',
     'dcototh',
     'dcpanic',
     'dcpdd',
     'dcpsych',
     'dcptsd',
     'dcsepa',
     'dcsoph',
     'dcspph',
     'dcstere',
     'dctic',
     'dcundif',
     'icagor',
     'icany',
     'icanycd',
     'icanyhk',
     'icanyso',
     'iccdfam',
     'icdisat',
     'iceat',
     'icemot',
     'icgena',
     'ichyper',
     'icmadep',
     'icmania',
     'icmutis',
     'icocd',
     'icodd',
     'icotanx',
     'icotdep',
     'icothat',
     'icothcd',
     'icother',
     'icothk',
     'icototh',
     'icpanic',
     'icpdd',
     'icpsych',
     'icptsd',
     'icreact',
     'icsepa',
     'icsoccd',
     'icsoph',
     'icspph',
     'icstere',
     'ictic',
     'icundif',
     'icunsoc',
     'ratedate',
     'ratername']
}


def main(argv):
    print argv[0], argv[1]
    try:
        file(argv[1])
        display_dawba(argv)
    except:
        centers = [ 'London', 'Nottingham', 'Dublin', 'Berlin',
                    'Mannheim', 'Hamburg', 'Paris', 'Dresden']
        for center in centers:
            l = glob(os.path.join(argv[1],'dawbanet2spss_%s*.csv'%center))
            for i in l:
                print i
                display_dawba(['import_dawba.py', i])

    # Update all questions
    for eid, pa in QUESTION_POSSIBLE_ANSWERS.iteritems():
        #Escape \, " and ' in possible_answer value
        if pa and pa != 'None':
            pa = pa.replace("\\", "\\\\")
            pa = pa.replace('"', '\\"')
            pa = pa.replace("'","\\'")
            #debug
            print 'pa', pa, 'eid', eid
        c.cursor().execute('SET X possible_answers \'%(pa)s\' WHERE X eid %(e)s'%{'e': eid, 'pa': pa})
        c.commit()

def display_dawba(argv):
    print argv[1]
    
    for i in subjects:
        print i,subjects[i]
    try :
        c.cursor().execute('INSERT Study X: X name \'Imagen\', X data_filepath \'\', X description \'Imagen Study\'')
        print 'Imagen inserted'
    except :
        c.rollback()
        print 'can not insert Study Imagen'
    
    for questionnaire in ['IMAGEN_PARENT1_FU','IMAGEN_YOUTH_FU','IMAGEN_COMPUTER_FU','IMAGEN_CLINICALRATE_FU']:
        try : 
            c.cursor().execute('''INSERT Questionnaire Q: Q name \'%(a)s\', Q identifier \'%(a)s\', Q type \'%(b)s\',
            Q note_format \'text/html\''''%{'a':questionnaire, 'b': 'DAWBA'})
            print 'Questionnaire %s inserted'%questionnaire
        except :
            c.rollback()
            print 'can not insert Questionnaire %s'%questionnaire
    
    questionnaire = argv[1].replace('.csv', '').split('/')[-1]
    print 'Questionnaire = ',questionnaire
        
    #city has to be read from filepath
    i = questionnaire.find('_')
    j = questionnaire[i+1:].find('_')
    city = ''
    if (j>=0):
        city = questionnaire[i+1:i+j+1]
    else:
        city = questionnaire[i+1:]
    center = {'LONDON':1, 'NOTTINGHAM':2, 'DUBLIN':3, 'BERLIN':4, 'HAMBURG':5, 'MANNHEIM':6, 'PARIS':7, 'DRESDEN':8}
    center_id = center[city.upper()]
    print city, center_id
    f = reader(open(argv[1]))
    h = f.next()
    for i in f:
        print 'IMAGEN_%s'%i[0]
        
        #the file may contain information for subjects who are not in DB
        if 'IMAGEN_%s'%i[0] in subjects:
            for questionnaire in ['IMAGEN_PARENT1_FU','IMAGEN_YOUTH_FU','IMAGEN_COMPUTER_FU','IMAGEN_CLINICALRATE_FU']:
                req = '''INSERT Assessment A, QuestionnaireRun Q: A identifier \'%(a)s_%(b)s\', 
                Q identifier \'%(a)s_%(b)s\', Q user_ident \'%(c)s\', Q concerns S, Q instance_of X, Q related_study Y Where S is Subject, 
                X is Questionnaire, Y is Study, S identifier \'IMAGEN_%(b)s\', X identifier \'%(a)s\', Y name \'Imagen\'
                '''%{'a':questionnaire, 'b': i[0], 'c':'C'}#Ask Alexis if user_ident is C | P
                try :
                    print 'req = ', req
                    res = c.cursor().execute(req)
                    print 'res = ', res
                except :
                    c.rollback()
                    print 'can not insert Assessment and QuestionnaireRun %(a)s_%(b)s'%{'a': questionnaire, 'b': i[0]}
                try :
                    c.cursor().execute('''SET A related_study S Where A is Assessment, S is Study, S name \'Imagen\', A identifier \'%(a)s_%(b)s\'
                    '''%{'b':i[0], 'a':questionnaire})
                    c.cursor().execute('''SET C holds A Where A is Assessment, C is Center, C identifier \'%(c)s\', A identifier \'%(a)s_%(b)s\'
                    '''%{'b':i[0], 'a':questionnaire, 'c':center_id})
                    c.cursor().execute('''SET S concerned_by A Where A is Assessment, S is Subject, S identifier \'IMAGEN_%(b)s\', A identifier \'%(a)s_%(b)s\'
                    '''%{'b':i[0], 'a':questionnaire})
                    c.cursor().execute('''SET A generates Q Where A is Assessment, Q is QuestionnaireRun, A identifier \'%(a)s_%(b)s\', 
                    Q identifier \'%(a)s_%(b)s\''''%{'a':questionnaire, 'b': i[0]})
                except :
                    c.rollback()
                    print 'can not relates Assessment and QuestionnaireRun %(a)s_%(b)s'%{'a': questionnaire, 'b': i[0]}
                
            for j in range(2,len(h)-1):
                quest = h[j+1]
                questionnaire = None
                if quest in dawba_dic['Parent1']:
                    questionnaire = 'IMAGEN_PARENT1_FU'
                if quest in dawba_dic['Youth']:
                    questionnaire = 'IMAGEN_YOUTH_FU'
                if quest in dawba_dic['Computer']:
                    questionnaire = 'IMAGEN_COMPUTER_FU'
                if quest in dawba_dic['ClinicalRate']:
                    questionnaire = 'IMAGEN_CLINICALRATE_FU'
                print '%(a)s, %(b)s, %(c)s, %(d)s'%{'a':i[0],'b':h[j+1],'c':i[j+1], 'd':questionnaire} 
            
                try :
                    #Unit Separator
                    US = '\x1f'
                    
                    value = i[j+1]
                    try:
                        value = float(value)
                        possible_answers = None
                        _type = u'numerical'
                    except ValueError:
                        # keep string as int, use possible_answers
                        if value.find(US)>=0:
                            #This case should never happened in usual usage, if it does the csv file may have been corrupted
                            raise Exception('Mais pourquoi ? (...\x1e, \x1f are Record Seprator and Unit Separator...)')
                        possible_answers = unicode(value)
                        value = 0
                        _type = u'text'
                    # Question
                    identifier = h[j+1]+'_'+questionnaire
                    if identifier in QUESTIONS:
                        question_eid = QUESTIONS[identifier]
                        # Update possible answer
                        if possible_answers:
                            old_possible_answers = (QUESTION_POSSIBLE_ANSWERS[question_eid] or u'').split(US)
                            if possible_answers not in old_possible_answers:
                                old_possible_answers += (possible_answers,)
                                QUESTION_POSSIBLE_ANSWERS[question_eid] = US.join(old_possible_answers)
                            value = old_possible_answers.index(possible_answers)
                        #print 'value',value
                    else:
                        req = '''INSERT Question Q: Q identifier \'%(a)s\', Q position \'%(b)s\', Q text \'%(c)s\', Q type \'%(t)s\', 
                        Q possible_answers \'%(e)s\', Q questionnaire X Where X is Questionnaire, X identifier \'%(d)s\'
                        '''%{'a': identifier, 'b': j+1, 'c': h[j+1], 't': _type, 'd': questionnaire, 'e':possible_answers}
                        print 'req = ', req
                        question = c.cursor().execute(req)
                        print 'question = ', question
                        print 'question[0][0] = ',question[0][0], 'possible_answers = ', possible_answers
                        QUESTIONS[identifier] = question[0][0]
                        question_eid = question[0][0]
                        QUESTION_POSSIBLE_ANSWERS[question_eid] = possible_answers
                    # Answer
                    res = c.cursor().execute('''Any A, X Where A is Answer, X is QuestionnaireRun, Q is Question, A question Q, Q identifier \'%(a)s\', 
                    A questionnaire_run X, X identifier \'%(b)s_%(c)s\''''%{'a': identifier, 'b': questionnaire, 'c': i[0]})
                    if not res:
                        c.cursor().execute('''INSERT Answer A: A value \'%(a)s\', A question Q, A questionnaire_run X Where Q is Question, X is QuestionnaireRun, 
                        Q identifier \'%(b)s\', X identifier \'%(c)s_%(d)s\''''%{'a': value, 'b': identifier, 'c': questionnaire, 'd': i[0]})
                except Exception as e:
                    c.rollback()
                    print 'can not insert Question %(q)s and Answer %(a)s'%{'q': h[j+1], 'a': value}
                    e_t, e_v, e_tb = sys.exc_info()
                    print 'Exc',e_t, e_v
                    traceback.print_tb(e_tb)
                #commit must be done here to avoid insertion of current question/answer be rollbacked by a next rollback() method call
                c.commit()            

if __name__ == '__main__':
    main(sys.argv)
